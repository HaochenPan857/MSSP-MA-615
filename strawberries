## The purpose of this R script is to get you started on the
## midterm project. 

library(tidyverse)
library(magrittr)
library(readxl)
library(gmodels)
library(Rmisc)


## Start by reading the data
strawb <- read_xlsx("D:/MSSP/strawberries-2022oct30-a.xlsx")
view(strawb)
## Get the column names and index them
cnames <- colnames(strawb)
x <- 1:dim(strawb)[2]

## Explore data by viewing it in R.  
## Double click the strawb data frame to lauch the view() function.
## The data frame has 1008 rows, so you can't get very far by
## simply scrolling around.  But, you can generate some initial
## questions to help you explore using R functions from the
## tidyverse.  
##
## It looks like some of the columns may be blank or may contain 
## a single unique value.  These columns can be eliminated without 
## losing any information.

## Start by examining the content of the columns

## Column 1 contains two unique values.  
## Retain column 1 -- those values might be needed.
unique(strawb[1])

## Column 2 -- contains the years included in this dataset.
## Keep column 2, of course.
unique(strawb[2])

## Column 3 -- contains the time periods covered by in the dataset.
## There's only one -- years.  No info here.  Drop it
unique(strawb[3])

## you don't have to do this one column at a time.
## Note that the cells of columns that are empty contain NA, so
## the number of unique values in these columns is 1, just 
## like column_3.

## Set T as an indicator
T <- NULL

## Collect number of unique rows in each column
for(i in x){T <- c(T, dim(unique(strawb[i]))[1])}

## Use T to select columns to drop -- 
drop_cols <- cnames[which(T == 1)]

## Now, drop the columns with only one unique value.
strawb %<>% select(!all_of(drop_cols))

## Let's arrange the data frame by year and state.
strawb %<>% arrange(Year, State)


## Look at the strawb data frame again. You can see that the 
## columns need work. The State ANSI column contains a unique
## code for each state. If you need to access US Census data for
## the states, this code will come in handy.
## Question 1
## If the value given for strawberry sales is 285 CWT, you know Sales =
colnames(strawb)

## now look at the `Data Item` column

temp1 <- strawb %>% select(`Data Item`) %>% 
         distinct()

## Look at temp1!  There's a lot going on there.
## In fact, it's at least three columns packed into one.
## Use separate() to split it up

## When you run this code you can see that there are 
## some rows where `Data Item` has 4 comma-separated 
## data items.  Look at the warning on the Console 
## after 

strawb2 <- strawb %>% separate(col=`Data Item`,
                into = c("Strawberries", "items", "units"),
                sep = ",",
                fill = "right")

## try 4 columns

strawb3 <- strawb %>% separate(col=`Data Item`,
            into = c("Strawberries", "type", "items", "units"),
                               sep = ",",
                               fill = "right")

## That worked. Clean up the dat.

rm(strawb2, strawb3)

strawb %<>% separate(col=`Data Item`,
                    into = c("Strawberries", "type", "items", "units"),
                    sep = ",",
                    fill = "right")


## now explore the new columns

## we know that "THIRAM" is a chemical in the data, so
## test for it to check out the way code
r_thiram <- grep("THIRAM", strawb$`Domain Category`)
r_thiram_1 <- grep("Thiram", 
                   strawb$`Domain Category`, 
                   ignore.case = T)
## Question2 
## Compute a 95% confidence interval for California organic strawberry sales in 2016.
organic_strawberry_sales_2016_ca <- filter(strawb, State == 'CALIFORNIA' & Year == 2016 & Domain == 'ORGANIC STATUS')
margin1 <- 231304956*1.96*0.137 ## which euqals to 62110007
upperbound1 <- 293414963
lowerbound1 <- 169194949
##

## Question3
## Compute a 95% confidence interval for California non-organic strawberry sales in 2016.
nonorganic_strawberry_sales_2016_ca <- filter(strawb, State == 'CALIFORNIA' & Year == 2016 & Domain != 'ORGANIC STATUS')
new_non <- filter(nonorgansales_2016_ca, Value != "(NA)" & Value != "(D)" & Domain != "TOTAL")
CI(as.numeric(new_non$Value))
## upper      mean     lower  199946.13  94783.67 -10378.79 

## Question4
##In the data set for the MA615 Strawberry project, how many different chemicals are listed?
unique(strawb[10])
chemical <- filter(strawb, Domain != 'ORGANIC STATUS' & 
                     Domain != 'TOTAL')
grep("TOTAL",
     chemical$`Domain Category`,
     ignore.case = T)
unique(chemical[11])
##  175 - 36  [1] 139

## Question5
## On the basis of the data set for the MA615 Strawberry project, how many more chemicals have been used in California than in Florida?
chemical_fl <- filter(strawb, State == 'FLORIDA' & 
                        Domain != 'ORGANIC STATUS' & 
                        Domain != 'TOTAL')
chemical_ca <- filter(strawb, State == 'CALIFORNIA' & 
                        Domain != 'ORGANIC STATUS' & 
                        Domain != 'TOTAL')
grep("TOTAL",
     chemical_fl$`Domain Category`,
     ignore.case = T)
unique(chemical_fl[11])
grep("TOTAL",
     chemical_ca$`Domain Category`,
     ignore.case = T)
unique(chemical_ca[11])
